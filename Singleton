单例模式：
确保某个类在整个项目中只有一个实例，自行实例化对象后，并向整个系统提供这个实例，这个类也被称为单例类；
(1) 单例类保证全局只有一个唯一的实例对象。
(2) 单例类保证只有唯一的接口获取这唯一实例。

实现大概可分为3种：
1.饿汉模式：饿汉式，在main函数运行前初始化，绝对安全
2.懒汉模式：不允许外界直接new一个单例对象，但会提供一个创建单例实例的接口；懒汉式单例就是需要使用这个单例对象的时候才去创建这个单例对象。
3.考虑线程安全的场景下：再考虑多线程，线程同步的场景下，采用mutex互斥锁，对单例类实例化的程序代码段进行加锁，解决线程安全的问题。
锁住初始化实例语句之后再次检查实例是否被创建 
双检查锁，但由于内存读写reorder不安全，因为C++创建对象时，会执行1、分配内存，2 调用构造，3 赋值操作三步操作。
然而现代CPU和编译器高并发下可能会进行乱序重排操作，因而创建对象new CSingleton的第2步可能会晚于第3步进行指令调用，因而导致出现未定义的的行为。

// 饿汉式，在main函数运行前初始化，绝对安全
class Singleton {
private:

    //    Singleton() = default;   // 自动生成默认构造函数
    Singleton() {
        cout << "Singleton construct\n";
    }
    Singleton(const Singleton& s) = delete;    // 禁用拷贝构造函数
    Singleton& operator=(const Singleton& s) = delete; // 禁用拷贝赋值操作符
    static Singleton m_singleton;
public:
    static Singleton* getInstance(){
        return &m_singleton;
    }
};
Singleton Singleton::m_singleton;

// 2.原始懒汉式单例模式
class CSingleton
{
private:
    static bool flag;
private:
    CSingleton() = default;
    CSingleton(CSingleton & ps) = delete;
    CSingleton & operator = (CSingleton & ps) = delete;
    ~CSingleton(){
        flag = false;
    }
public:
    /*1.创建单例对象；2.销毁单例对象；3.work Function*/
    static CSingleton * GetInstance(){
        CSingleton * ps = nullptr;
        if(false == flag){
            flag = true;
            ps = new CSingleton();
            cout<<"Create Singleton Instance sucessful..."<<endl;
            return ps;
        }else{
            return nullptr;
        }
    }
    static void DestroyInstance(CSingleton * ps){
        delete ps;
        ps = nullptr;
        cout<< "Destroy Instance Successful..."<<endl;
    }
};
bool CSingleton::flag = false;

// 3. 线程安全的懒汉式单例模式
class Singleton {
private:
    static Singleton *m_singleton;
    static mutex m_mutex;
    Singleton() = default;
    Singleton(const Singleton& s) = delete; // 禁用拷贝构造函数
    Singleton& operator=(const Singleton& s) = delete;  // 禁用拷贝赋值操作符
    class GarbageCollector {
    public:
        ~GarbageCollector() {
            cout << "~GarbageCollector\n";
            if (Singleton::m_singleton) {
                cout << "free m_singleton\n";
                delete Singleton::m_singleton;
                Singleton::m_singleton = nullptr;
            }
        }
    };
    static GarbageCollector m_gc;
public:
    static Singleton* getInstance() { // 加锁的粒度大，效率较低， 对高并发的访问
        m_mutex.lock(); // 加锁，保证只有一个线程在访问下面的语句
        if (Singleton::m_singleton == nullptr){
/*std::this_thread::sleep_for(std::chrono::milliseconds(1000)); 
休眠，模拟创建实例的时间
*/
            m_singleton = new Singleton();
        }
        m_mutex.unlock();//解锁
        return m_singleton;
    }
};
Singleton* Singleton::m_singleton = nullptr;
mutex Singleton::m_mutex;
Singleton::GarbageCollector Singleton::m_gc;


// 4.线程安全的单例模式：锁住初始化实例语句之后再次检查实例是否被创建
/* 双检查锁，但由于内存读写reorder不安全 因为C++创建对象时，会执行1、分配内存，2 调用构造，3 赋值操作三步操作，
然而现代CPU和编译器高并发下可能会进行乱序重排操作，因而创建对象new CSingleton的第2步可能会晚于第3步进行指令调用，
因而导致出现未定义的的行为。*/
class Singleton {
private:
    static Singleton *m_singleton;
    static mutex m_mutex;
    Singleton() = default;
    Singleton(const Singleton& s) = default;
    Singleton& operator=(const Singleton& s) = default;
    class GarbageCollector {
    public:
        ~GarbageCollector() {
            cout << "~GarbageCollector\n";
            if (Singleton::m_singleton) {
                cout << "free m_singleton\n";
                delete Singleton::m_singleton;
                Singleton::m_singleton = nullptr;
            }
        }
    };
    static GarbageCollector m_gc;
public:
    void *getSingletonAddress() {
        return m_singleton;
    }
    static Singleton* getInstance() {
        if (Singleton::m_singleton == nullptr){
// 加锁，保证只有一个线程在访问线程内的代码

            m_mutex.lock();              
if (Singleton::m_singleton == nullptr) { //再次检查
                m_singleton = new Singleton();  
// 对象的new不是原子操作 1、分配内存，2 调用构造，3 赋值操作，到第3步的时候才是m_singleton非空
            }
            m_mutex.unlock();//解锁
        }
        return m_singleton;
    }
};
std::atomic<Singleton*>  Singleton::m_instance;
std::mutex Singleton::m_mutex;
Singleton::GarbageCollector Singleton::m_gc;
与线程安全的懒汉单例区别是：没有禁用拷贝构造函数，双检查锁：锁住初始化实例语句之后再次检查实例是否被创建。

//// 定义一个互斥锁
static mutex s_m;

void print_address(){
    // 获取实例
    Singleton* singleton = Singleton::getInstance();
    // 打印singleton地址
    s_m.lock(); // 锁住，保证只有一个线程在打印地址
    cout<<singleton<<endl;
    //    cout<<"Address:" << singleton->getSingletonAddress() << endl; // 只有双检查锁
    s_m.unlock();// 解锁
}

void test_Singleton(){
    thread threads[10];
    // 创建10个线程
    for (auto&t : threads)
        t = thread(print_address);
    // 对每个线程调用join，主线程等待子线程完成运行
    for (auto&t : threads)
        t.join();
}


int main()
{
//    Singleton *s = new Singleton();
    cout << "main\n";

    test_Singleton();

    cout << "test finish! " << Singleton::getInstance() << endl;
    return 0;
}
