观察者模式又称：发布订阅模式：
一、概念
当我们需要为某些对象建立一种“通知依赖关系”时，当 目标对象的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。

二、总结：
1.使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达到松耦合。
2.目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。
3.观察者自己决定是否需要订阅通知，目标对象对此一无所知。

三、观察者模式的拉模型和推模型：
拉模型：
目标对象主动向观察者推送目标的详细信息，不管观察者是否需要，推送的信息通常是目标对象的全部或部分数据，相当于广播通信。（用户主动从服务器拿数据）；
拉模型也会有推送，只是粒度小一点；比如知乎，头条定期会推送标题，用户点进标题拉取内容。
推模型：
目标对象在通知观察者的时候，只传递少量的信息。如果观察者需要更具体的信息，由观察者主动到目标对象中获取，相当于是观察者从目标对象中拉数据。一般这种模型的实现中，会把目标对象通过update方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。
把具体的内容广播出去；（服务器主动发送数据给用户）；

四、Code
#include <iostream>
#include <list>

using namespace std;

class Subject;

class Observer
{
public:
    Observer(){}
    virtual ~Observer(){}
    virtual void update(Subject *subject) = 0;
    virtual void update(string content) = 0;
};


class  Subject
{
public:
    Subject() {}
    virtual ~ Subject() {}
    virtual string getContent() = 0;
    virtual string getAbstractContent() = 0;
    virtual void setContent(string content) = 0;
    // 订阅主题
    void attach(Observer *observer) {
        observers.push_back(observer);
    }
    // 取消订阅
    void detach(Observer *observer) {
        observers.remove(observer);
    }

    // 通知所有的订阅者
    virtual void notifyObservers() {
        for(Observer *reader: observers) {
            // 拉模型  (也是有推送的性质,只是粒度小一些)
            reader->update(this);
        }
    }
    // 通知所有的订阅者
    virtual void notifyObservers(string content) {
        for(Observer *reader: observers) {
            // 推模型
            reader->update(content);
        }
    }
private:
    list<Observer *> observers;    // 保存注册的观察者
};

class Reader : public Observer
{
public:
    Reader() {}
    virtual ~Reader() {}
    virtual void update(Subject *subject) {
        // 调用对应的方法去拉取内容 subject->getContent()
        cout << m_name << "收到报纸和阅读它, 具体内容" << subject->getContent() << endl;
    }
    virtual void update(string content) {
        // 推模型
        cout << m_name << "收到报纸和阅读它, 具体内容" << content << endl;
    }
    string getName() {
        return m_name;
    }
    void setName(string name) {
        m_name = name;
    }
private:
    string m_name;
};


class NewsPaper: public Subject
{
public:
    NewsPaper() {}
    virtual ~NewsPaper() {}

    void setContent(string content) {
        m_content = content;
        notifyObservers();
    }
    virtual string getContent() {
        return m_content;
    }
    virtual string getAbstractContent() {
        return  "摘要:";
    }
private:
    string m_content;
};


int main()
{
    // 创建一个报纸主题
    NewsPaper *subject = new NewsPaper();

    // 创建观察者，读者
    Reader *reader1 = new Reader();
    reader1->setName("sunday");

    Reader *reader2 = new Reader();
    reader2->setName("monday");

    Reader *reader3 = new Reader();
    reader3->setName("summer");

    subject->attach(reader1);
    subject->setContent("it is a rainy day");
    cout << "-----------------------" << endl;
    subject->attach(reader2);
    subject->attach(reader3);

    subject->setContent("tomorrow will be fine");

    cout << "Hello World!" << endl;
    return 0;
}
